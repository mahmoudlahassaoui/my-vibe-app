doctype html
html
  head
    title Welcome to My Vibe.d App
    link(rel="stylesheet", href="/style.css")
    script
      | function changeBackgroundColor() {
      |   console.log('üéØ Button clicked! Starting effects...');
      |   const debugInfo = document.getElementById('debug-info');
      |   
      |   const colors = [
      |     '#f5f5f5', '#e8f4fd', '#fff2e8', '#f0fff0', '#fff0f5', '#f0f8ff', '#fdf5e6', '#f5fffa',
      |     '#ffe4e1', '#e6e6fa', '#f0f8ff', '#ffefd5', '#f5deb3', '#dda0dd', '#98fb98', '#afeeee',
      |     '#ffd1dc', '#b0e0e6', '#ffb6c1', '#87ceeb', '#deb887', '#f0e68c', '#ffa07a', '#20b2aa'
      |   ];
      |   const button = document.querySelector('.color-btn');
      |   
      |   if (!button) {
      |     console.error('‚ùå Button not found!');
      |     debugInfo.textContent = 'ERROR: Button not found!';
      |     return;
      |   }
      |   
      |   const currentColor = document.body.style.backgroundColor || '#f5f5f5';
      |   let newColor;
      |   do {
      |     newColor = colors[Math.floor(Math.random() * colors.length)];
      |   } while (newColor === currentColor);
      |   
      |   console.log('üé® Changing color to:', newColor);
      |   debugInfo.textContent = `Changing to: ${newColor}`;
      |   
      |   // Play sound effects!
      |   playClickSound();
      |   
      |   // Add smooth transition
      |   document.body.style.transition = 'background-color 0.8s ease-in-out';
      |   document.body.style.backgroundColor = newColor;
      |   
      |   // Button animation and text change
      |   console.log('üåÄ Starting button animation...');
      |   button.style.transition = 'transform 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55)';
      |   button.style.transform = 'scale(1.2) rotate(360deg)';
      |   button.textContent = 'üé® AMAZING!';
      |   
      |   // Create floating particles effect
      |   console.log('üéÜ Creating particles...');
      |   createParticles();
      |   
      |   // Play success sound after animation
      |   setTimeout(() => {
      |     playSuccessSound();
      |   }, 400);
      |   
      |   // Reset button after animation
      |   setTimeout(() => {
      |     console.log('üîÑ Resetting button...');
      |     button.style.transform = '';
      |     button.textContent = 'Change Background Color!';
      |     debugInfo.textContent = 'Effects completed! Click again...';
      |   }, 800);
      | }
      | 
      | function playClickSound() {
      |   try {
      |     // Create a satisfying click sound using Web Audio API
      |     const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      |     
      |     // Resume audio context if suspended (required by browsers)
      |     if (audioContext.state === 'suspended') {
      |       audioContext.resume();
      |     }
      |     
      |     const oscillator = audioContext.createOscillator();
      |     const gainNode = audioContext.createGain();
      |     
      |     oscillator.connect(gainNode);
      |     gainNode.connect(audioContext.destination);
      |     
      |     oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
      |     oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.1);
      |     
      |     gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
      |     gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
      |     
      |     oscillator.start(audioContext.currentTime);
      |     oscillator.stop(audioContext.currentTime + 0.1);
      |   } catch (e) {
      |     console.log('Audio not supported or blocked');
      |   }
      | }
      | 
      | function playSuccessSound() {
      |   try {
      |     // Create a magical success sound
      |     const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      |     
      |     // Resume audio context if suspended
      |     if (audioContext.state === 'suspended') {
      |       audioContext.resume();
      |     }
      |     
      |     const oscillator1 = audioContext.createOscillator();
      |     const oscillator2 = audioContext.createOscillator();
      |     const gainNode = audioContext.createGain();
      |     
      |     oscillator1.connect(gainNode);
      |     oscillator2.connect(gainNode);
      |     gainNode.connect(audioContext.destination);
      |     
      |     // Create a magical chord
      |     oscillator1.frequency.setValueAtTime(523.25, audioContext.currentTime); // C5
      |     oscillator2.frequency.setValueAtTime(659.25, audioContext.currentTime); // E5
      |     
      |     oscillator1.frequency.exponentialRampToValueAtTime(783.99, audioContext.currentTime + 0.3); // G5
      |     oscillator2.frequency.exponentialRampToValueAtTime(1046.50, audioContext.currentTime + 0.3); // C6
      |     
      |     gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
      |     gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.4);
      |     
      |     oscillator1.start(audioContext.currentTime);
      |     oscillator2.start(audioContext.currentTime);
      |     oscillator1.stop(audioContext.currentTime + 0.4);
      |     oscillator2.stop(audioContext.currentTime + 0.4);
      |   } catch (e) {
      |     console.log('Audio not supported or blocked');
      |   }
      | }
      | 
      | function createParticles() {
      |   const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#ffeaa7', '#dda0dd', '#98fb98'];
      |   for (let i = 0; i < 15; i++) {
      |     const particle = document.createElement('div');
      |     particle.className = 'particle';
      |     particle.style.cssText = `
      |       position: fixed;
      |       width: 10px;
      |       height: 10px;
      |       background: ${colors[Math.floor(Math.random() * colors.length)]};
      |       border-radius: 50%;
      |       pointer-events: none;
      |       z-index: 1000;
      |       left: ${Math.random() * window.innerWidth}px;
      |       top: ${Math.random() * window.innerHeight}px;
      |       animation: float 2s ease-out forwards;
      |     `;
      |     document.body.appendChild(particle);
      |     setTimeout(() => particle.remove(), 2000);
      |   }
      | }
  body
    nav
      ul
        li: a(href="/") Home
        - if (isLoggedIn)
          li: a(href="/contact") Contact
          li: a(href="/messages") Messages
          li: a(href="/logout") Logout (#{username})
        - else
          li: a(href="/login") Login
          li: a(href="/register") Register
    
    .container
      - if (isLoggedIn)
        h1 üéâ Welcome back, #{username}!
        .success
          p You are logged in and ready to use all features!
      - else
        h1 üëã Welcome to My Vibe.d App!
        p Please login or register to access all features.
      
      .stats
        p üìä Total messages received: #{messageCount}
      
      h2 What can you do?
      ul.feature-list
        - if (isLoggedIn)
          li ‚úÖ Send contact messages
          li ‚úÖ View all messages
          li ‚úÖ Access your account
          li ‚úÖ Secure session management
        - else
          li üîê Create an account to get started
          li üîê Login to access messaging features
          li üìñ Learn about Vibe.d web development
      
      .actions
        - if (isLoggedIn)
          a.btn(href="/contact") Send Message
          a.btn.secondary(href="/messages") View Messages
        - else
          a.btn(href="/register") Get Started
          a.btn.secondary(href="/login") Login
      
      .fun-section
        h2 üé® Fun Zone
        button.color-btn(onclick="changeBackgroundColor()") Change Background Color!
        p#debug-info(style="color: white; margin-top: 10px; font-size: 12px;") Click the button to test effects...