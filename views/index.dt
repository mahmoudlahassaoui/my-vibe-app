doctype html
html
  head
    title Welcome to My Vibe.d App
    link(rel="stylesheet", href="/style.css")
    script
      | console.log('🚀 Inline script loaded!');
      | 
      | // Apply saved color when page loads
      | document.addEventListener('DOMContentLoaded', function() {
      |   const savedColor = localStorage.getItem('vibeAppBackgroundColor');
      |   if (savedColor) {
      |     console.log('🎨 Applying saved color to home page:', savedColor);
      |     document.body.style.backgroundColor = savedColor;
      |     document.body.style.transition = 'background-color 0.8s ease-in-out';
      |   }
      | });
      | 
      | function changeBackgroundColor() {
      |   console.log('🎯 Button clicked! Starting EPIC effects...');
      |   alert('Button clicked! Function is working!');
      |   const debugInfo = document.getElementById('debug-info');
      |   const colors = [
      |     '#f5f5f5', '#e8f4fd', '#fff2e8', '#f0fff0', '#fff0f5', '#f0f8ff', '#fdf5e6', '#f5fffa',
      |     '#ffe4e1', '#e6e6fa', '#f0f8ff', '#ffefd5', '#f5deb3', '#dda0dd', '#98fb98', '#afeeee',
      |     '#ffd1dc', '#b0e0e6', '#ffb6c1', '#87ceeb', '#deb887', '#f0e68c', '#ffa07a', '#20b2aa'
      |   ];
      |   const button = document.querySelector('.color-btn');
      |   
      |   const currentColor = document.body.style.backgroundColor || '#f5f5f5';
      |   let newColor;
      |   do {
      |     newColor = colors[Math.floor(Math.random() * colors.length)];
      |   } while (newColor === currentColor);
      |   
      |   console.log('🎨 Changing color to:', newColor);
      |   if (debugInfo) debugInfo.textContent = 'Changing to: ' + newColor;
      |   
      |   // Save color and play sound
      |   localStorage.setItem('vibeAppBackgroundColor', newColor);
      |   playClickSound();
      |   
      |   // Apply color with transition
      |   document.body.style.transition = 'background-color 0.8s ease-in-out';
      |   document.body.style.backgroundColor = newColor;
      |   
      |   // Button animation
      |   console.log('🌀 Starting button animation...');
      |   button.style.transition = 'transform 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55)';
      |   button.style.transform = 'scale(1.2) rotate(360deg)';
      |   button.textContent = '🎨 AMAZING!';
      |   
      |   // Create particles
      |   console.log('🎆 Creating particles...');
      |   createParticles();
      |   
      |   // Success sound and reset
      |   setTimeout(() => { playSuccessSound(); }, 400);
      |   setTimeout(() => {
      |     console.log('🔄 Resetting button...');
      |     button.style.transform = '';
      |     button.textContent = 'Change Background Color!';
      |     if (debugInfo) debugInfo.textContent = 'Effects completed! Click again...';
      |   }, 800);
      | }
      | 
      | function playClickSound() {
      |   try {
      |     const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      |     if (audioContext.state === 'suspended') audioContext.resume();
      |     const oscillator = audioContext.createOscillator();
      |     const gainNode = audioContext.createGain();
      |     oscillator.connect(gainNode);
      |     gainNode.connect(audioContext.destination);
      |     oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
      |     oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.1);
      |     gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
      |     gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
      |     oscillator.start(audioContext.currentTime);
      |     oscillator.stop(audioContext.currentTime + 0.1);
      |   } catch (e) { console.log('Audio not supported'); }
      | }
      | 
      | function playSuccessSound() {
      |   try {
      |     const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      |     if (audioContext.state === 'suspended') audioContext.resume();
      |     const oscillator1 = audioContext.createOscillator();
      |     const oscillator2 = audioContext.createOscillator();
      |     const gainNode = audioContext.createGain();
      |     oscillator1.connect(gainNode);
      |     oscillator2.connect(gainNode);
      |     gainNode.connect(audioContext.destination);
      |     oscillator1.frequency.setValueAtTime(523.25, audioContext.currentTime);
      |     oscillator2.frequency.setValueAtTime(659.25, audioContext.currentTime);
      |     oscillator1.frequency.exponentialRampToValueAtTime(783.99, audioContext.currentTime + 0.3);
      |     oscillator2.frequency.exponentialRampToValueAtTime(1046.50, audioContext.currentTime + 0.3);
      |     gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
      |     gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.4);
      |     oscillator1.start(audioContext.currentTime);
      |     oscillator2.start(audioContext.currentTime);
      |     oscillator1.stop(audioContext.currentTime + 0.4);
      |     oscillator2.stop(audioContext.currentTime + 0.4);
      |   } catch (e) { console.log('Audio not supported'); }
      | }
      | 
      | function createParticles() {
      |   const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#ffeaa7', '#dda0dd', '#98fb98'];
      |   for (let i = 0; i < 15; i++) {
      |     const particle = document.createElement('div');
      |     particle.style.cssText = 'position: fixed; width: 10px; height: 10px; background: ' + 
      |       colors[Math.floor(Math.random() * colors.length)] + 
      |       '; border-radius: 50%; pointer-events: none; z-index: 1000; left: ' + 
      |       Math.random() * window.innerWidth + 'px; top: ' + 
      |       Math.random() * window.innerHeight + 'px; animation: float 2s ease-out forwards;';
      |     document.body.appendChild(particle);
      |     setTimeout(() => particle.remove(), 2000);
      |   }
      | }
      | 
      | // Game Variables
      | let gameSequence = [];
      | let playerSequence = [];
      | let gameLevel = 1;
      | let gameScore = 0;
      | let gameActive = false;
      | 
      | // Color Memory Game Functions
      | function startGame() {
      |   console.log('🎮 Starting Color Memory Game!');
      |   gameSequence = [];
      |   playerSequence = [];
      |   gameLevel = 1;
      |   gameScore = 0;
      |   gameActive = true;
      |   updateGameScore();
      |   document.getElementById('game-instructions').textContent = 'Watch the sequence...';
      |   setTimeout(() => { addToSequence(); playSequence(); }, 1000);
      | }
      | 
      | function addToSequence() {
      |   const colors = ['red', 'blue', 'green', 'yellow'];
      |   const randomColor = colors[Math.floor(Math.random() * colors.length)];
      |   gameSequence.push(randomColor);
      |   console.log('🎯 Added to sequence:', randomColor);
      | }
      | 
      | function playSequence() {
      |   let i = 0;
      |   const interval = setInterval(() => {
      |     if (i >= gameSequence.length) {
      |       clearInterval(interval);
      |       document.getElementById('game-instructions').textContent = 'Now repeat the sequence!';
      |       return;
      |     }
      |     flashTile(gameSequence[i]);
      |     i++;
      |   }, 800);
      | }
      | 
      | function flashTile(color) {
      |   const tile = document.querySelector('[data-color="' + color + '"]');
      |   if (!tile) return;
      |   tile.classList.add('flash');
      |   playTileSound(color);
      |   setTimeout(() => { tile.classList.remove('flash'); }, 500);
      | }
      | 
      | function gameClick(color) {
      |   if (!gameActive) return;
      |   console.log('🎯 Player clicked:', color);
      |   flashTile(color);
      |   playerSequence.push(color);
      |   const currentIndex = playerSequence.length - 1;
      |   if (playerSequence[currentIndex] !== gameSequence[currentIndex]) {
      |     gameOver();
      |     return;
      |   }
      |   if (playerSequence.length === gameSequence.length) {
      |     gameScore += gameLevel * 10;
      |     gameLevel++;
      |     playerSequence = [];
      |     updateGameScore();
      |     document.getElementById('game-instructions').textContent = 'Great! Next level...';
      |     setTimeout(() => { addToSequence(); playSequence(); }, 1500);
      |   }
      | }
      | 
      | function gameOver() {
      |   gameActive = false;
      |   document.getElementById('game-instructions').textContent = 'Game Over! Final Score: ' + gameScore;
      |   console.log('💀 Game Over! Score:', gameScore);
      | }
      | 
      | function updateGameScore() {
      |   const scoreElement = document.getElementById('game-score');
      |   if (scoreElement) {
      |     scoreElement.textContent = 'Score: ' + gameScore + ' | Level: ' + gameLevel;
      |   }
      | }
      | 
      | function playTileSound(color) {
      |   try {
      |     const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      |     if (audioContext.state === 'suspended') audioContext.resume();
      |     const oscillator = audioContext.createOscillator();
      |     const gainNode = audioContext.createGain();
      |     oscillator.connect(gainNode);
      |     gainNode.connect(audioContext.destination);
      |     const frequencies = { red: 261.63, blue: 329.63, green: 392.00, yellow: 523.25 };
      |     oscillator.frequency.setValueAtTime(frequencies[color], audioContext.currentTime);
      |     gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
      |     gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
      |     oscillator.start(audioContext.currentTime);
      |     oscillator.stop(audioContext.currentTime + 0.3);
      |   } catch (e) { console.log('Audio not supported'); }
      | }
      | 
      | // Color Palette Functions
      | function applyPalette(paletteName) {
      |   console.log('🎨 Applying palette:', paletteName);
      |   const palettes = {
      |     sunset: ['#ff6b6b', '#ffa726', '#ffcc02'],
      |     ocean: ['#4ecdc4', '#45b7d1', '#96ceb4'],
      |     forest: ['#98fb98', '#90ee90', '#8fbc8f'],
      |     royal: ['#667eea', '#764ba2', '#dda0dd']
      |   };
      |   const colors = palettes[paletteName];
      |   if (!colors) return;
      |   const selectedColor = colors[0];
      |   localStorage.setItem('vibeAppBackgroundColor', selectedColor);
      |   document.body.style.transition = 'background-color 0.8s ease-in-out';
      |   document.body.style.backgroundColor = selectedColor;
      |   createPaletteParticles(colors);
      |   console.log('🎨 Applied ' + paletteName + ' palette!');
      | }
      | 
      | function createPaletteParticles(colors) {
      |   for (let i = 0; i < 20; i++) {
      |     const particle = document.createElement('div');
      |     particle.style.cssText = 'position: fixed; width: 8px; height: 8px; background: ' + 
      |       colors[Math.floor(Math.random() * colors.length)] + 
      |       '; border-radius: 50%; pointer-events: none; z-index: 1000; left: ' + 
      |       Math.random() * window.innerWidth + 'px; top: ' + 
      |       Math.random() * window.innerHeight + 'px; animation: float 3s ease-out forwards;';
      |     document.body.appendChild(particle);
      |     setTimeout(() => particle.remove(), 3000);
      |   }
      | }
  body
    nav
      ul
        li: a(href="/") Home
        - if (isLoggedIn)
          li: a(href="/contact") Contact
          li: a(href="/messages") Messages
          li: a(href="/logout") Logout (#{username})
        - else
          li: a(href="/login") Login
          li: a(href="/register") Register
    
    .container
      - if (isLoggedIn)
        h1 🎉 Welcome back, #{username}!
        .success
          p You are logged in and ready to use all features!
      - else
        h1 👋 Welcome to My Vibe.d App!
        p Please login or register to access all features.
      
      .stats
        p 📊 Total messages received: #{messageCount}
      
      h2 What can you do?
      ul.feature-list
        - if (isLoggedIn)
          li ✅ Send contact messages
          li ✅ View all messages
          li ✅ Access your account
          li ✅ Secure session management
        - else
          li 🔐 Create an account to get started
          li 🔐 Login to access messaging features
          li 📖 Learn about Vibe.d web development
      
      .actions
        - if (isLoggedIn)
          a.btn(href="/contact") Send Message
          a.btn.secondary(href="/messages") View Messages
        - else
          a.btn(href="/register") Get Started
          a.btn.secondary(href="/login") Login
      
      .fun-section
        h2 🎨 Fun Zone
        button.color-btn(onclick="changeBackgroundColor()") Change Background Color!
        p#debug-info(style="color: white; margin-top: 10px; font-size: 12px;") Click the button to test effects...
      
      .game-section
        h2 🎮 Color Memory Game
        p#game-instructions Remember the sequence and click the colors in order!
        .game-board
          .color-tile(data-color="red", onclick="gameClick('red')")
          .color-tile(data-color="blue", onclick="gameClick('blue')")
          .color-tile(data-color="green", onclick="gameClick('green')")
          .color-tile(data-color="yellow", onclick="gameClick('yellow')")
        button.game-btn(onclick="startGame()") Start Game
        p#game-score Score: 0 | Level: 1
        
      .palette-section
        h2 🎨 Color Palettes
        p Choose from beautiful preset color themes!
        .palette-grid
          .palette-option(onclick="applyPalette('sunset')")
            .palette-preview
              .color-dot(style="background: #ff6b6b")
              .color-dot(style="background: #ffa726")
              .color-dot(style="background: #ffcc02")
            p Sunset
          .palette-option(onclick="applyPalette('ocean')")
            .palette-preview
              .color-dot(style="background: #4ecdc4")
              .color-dot(style="background: #45b7d1")
              .color-dot(style="background: #96ceb4")
            p Ocean
          .palette-option(onclick="applyPalette('forest')")
            .palette-preview
              .color-dot(style="background: #98fb98")
              .color-dot(style="background: #90ee90")
              .color-dot(style="background: #8fbc8f")
            p Forest
          .palette-option(onclick="applyPalette('royal')")
            .palette-preview
              .color-dot(style="background: #667eea")
              .color-dot(style="background: #764ba2")
              .color-dot(style="background: #dda0dd")
            p Royal